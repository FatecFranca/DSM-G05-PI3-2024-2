generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  farm          Farm      @relation(fields: [farmId], references: [id])
  farmId        String    @db.ObjectId
  name          String
  ocupation     Ocupation @relation(fields: [ocupationId], references: [id])
  ocupationId   String    @db.ObjectId
  master        Boolean
  email         String    @unique
  password      String
  created_at    DateTime  @default(now())
  status_active Boolean
}

model Ocupation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  ocupation_name String
  created_at     DateTime @default(now())
  status_active  Boolean
  users          User[]
}

model Farm {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  registration_date DateTime?
  status            Boolean
  cnpj              String    @unique
  fantasy_name      String
  social_reason     String?
  cep               String?
  address           String
  number_address    String?
  phone_number      String
  created_at        DateTime  @default(now())
  status_active     Boolean
  users             User[]
}

model Patch {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  patch_name    String
  patch_type    String
  description   String
  created_at    DateTime @default(now())
  status_active Boolean
  animals       Animal[]
}

model Animal {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  earring         String
  name_animal     String
  collar          String
  gender          String
  patchId         String    @db.ObjectId
  patch           Patch     @relation(fields: [patchId], references: [id])
  birthdate       DateTime
  last_childbirth DateTime?
  pregnant        Boolean
  animal_breed    String
  name_father     String?
  name_mother     String?
  birth_weight    String?
  created_at      DateTime  @default(now())
  status_active   Boolean
  alerts          Alert[]
}

model Alert {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  animalId        String    @db.ObjectId
  animal          Animal    @relation(fields: [animalId], references: [id])
  description     String
  resolution      String?
  resolution_date DateTime?
  created_at      DateTime  @default(now())
  status_active   Boolean
}
